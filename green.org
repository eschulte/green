#+Title: Forrest Sensors
#+Options: toc:nil ^:nil

* Arduino
[[http://www.youtube.com/watch?v=fCxzA9_kg6s&feature=related][intro tutorial video]]

** Working Makefile Build
Using the Makefile tool from [[http://github.com/mjoldfield/Arduino-Makefile.git][Arduino-Makefile.git]].

Added the following to the Makefile
: BOARD_TAG     = atmega328
: ARDUINO_PORT  = /dev/ttyUSB0
: ARDUINO_LIBS  = /usr/share/arduino
: AVRDUDE       = /usr/bin/avrdude
: AVR_TOOLS_DIR = /usr/share/arduino/hardware/tools/avr
: AVRDUDE_CONF  = /usr/share/arduino/hardware/tools/avrdude.conf

** Board Types
: --            uno: Arduino Uno
: --      atmega328: Arduino Duemilanove w/ ATmega328
: --      diecimila: Arduino Diecimila or Duemilanove w/ ATmega168
: --        nano328: Arduino Nano w/ ATmega328
: --           nano: Arduino Nano w/ ATmega168
: --       mega2560: Arduino Mega 2560 or Mega ADK
: --           mega: Arduino Mega (ATmega1280)
: --       leonardo: Arduino Leonardo
: --        mini328: Arduino Mini w/ ATmega328
: --           mini: Arduino Mini w/ ATmega168
: --       ethernet: Arduino Ethernet
: --            fio: Arduino Fio
: --          bt328: Arduino BT w/ ATmega328
: --             bt: Arduino BT w/ ATmega168
: --     lilypad328: LilyPad Arduino w/ ATmega328
: --        lilypad: LilyPad Arduino w/ ATmega168
: --       pro5v328: Arduino Pro or Pro Mini (5V, 16 MHz) w/ ATmega328
: --          pro5v: Arduino Pro or Pro Mini (5V, 16 MHz) w/ ATmega168
: --         pro328: Arduino Pro or Pro Mini (3.3V, 8 MHz) w/ ATmega328
: --            pro: Arduino Pro or Pro Mini (3.3V, 8 MHz) w/ ATmega168
: --      atmega168: Arduino NG or older w/ ATmega168
: --        atmega8: Arduino NG or older w/ ATmega8

* Ideas
** shakers
Is there a way to charge up a battery from shaking, like those fancy
watches?  If so then the sensors could be powered off all the time,
and they could have such shaker-chargers which would then;
1. build up energy when a tree is shaking (e.g., from chainsawing)
2. turn on
3. sense
4. report

** Orangutan Life Alert
Equip orangutans with a life-alert type pendant, which they could
activate to text their current GPS coordinates to some external
monitoring system.  They could then /maybe/ use such a system to call
for help when something fishy (logging, burning, etc...) is going on.

** Monkey Spies
Setup a system which is powered off *all* of the time.

This systems has a large button which when pressed
1. turns it on
2. it senses
3. if it detects deforestation activity it then
   - sends a text message
   - does something fun for the button presser

Train monkeys to press these buttons when something fishy is going on?

** Text message alerts
If there are indigenous people, and they are amenable, maybe do a
[[http://www.wired.com/business/2009/03/africa-awaits-y/][text-eagle]] thing where they send alert texts and get back minutes (or
much more) if deforestation is occurring.

If they could also send GPS coordinates, and maybe pictures of the
logging that would also be awesome.

* Tasks
- talk to Taylor about Arduinos
- cell network integration
- Arduino -- dev environment, can I get my hands on some
- microphones

** DONE FFT analysis software
   :PROPERTIES:
   :ID:       852ecdc0-4273-4000-86f5-69341db0c48c
   :END:
file:fft/fft.ino

*** Links
- http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1286718155
- http://arduino.cc/playground/Main/InterfacingWithHardware#arstat
- http://www.dtic.upf.edu/~jlozano/interfaces/blow_sensor.html
- http://www.nerdkits.com/videos/sound_meter/

** DONE serial interface
Set the following terminal characteristics for =/dev/ttyUSB0=.
#+begin_src sh
  stty -F /dev/ttyUSB0 cs8 9600 ignbrk -brkint -imaxbel \
      -opost -onlcr -isig -icanon -iexten \
      -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts
#+end_src

Then connect to it using GNU screen with.
#+begin_src sh
  screen -c /dev/null /dev/ttyUSB0 9600
#+end_src

** TODO SMS Communication
   :PROPERTIES:
   :ID:       d3ed4558-5af2-46a4-b3b1-f95008ad9971
   :END:

** find a waterproof microphone
** figure out communication
* Notes
** SMS text messages
[[http://en.wikipedia.org/wiki/Short_Message_Service#Technical_details][SMS]] (short message service) text messages are implemented along the
[[http://en.wikipedia.org/wiki/Short_message_service_technical_realisation_(GSM)][GSM]] recommendations.  Where GSM is the technical implementation upon
which SMS text messages are based.

It is possible to send these from the command line if you have a
connection to a "dial-up" phone-line modem.  See [[http://howto.gumph.org/content/send-sms-messages-from-linux/][here]].

** microphones
- http://interface.khm.de/index.php/lab/experiments/arduino-realtime-audio-processing/
- http://www.mtasales.com.au/voicetech/lav_min_vt500water.htm
- http://arduino.cc/playground/Main/InterfacingWithHardware#arstat

* other platforms
** Zigbee
A standard for communication protocols

** waspmote
A hardware device
http://www.libelium.com/products/waspmote

* possible configurations
- group of waspmotes communicating w/zigbee
  (needs a base station or something)
- individual cell or smart phones

* Hardware
- sound input
- GPRS
- solar panel

* Software
- [[id:852ecdc0-4273-4000-86f5-69341db0c48c][FFT analysis software]]
- [[id:d3ed4558-5af2-46a4-b3b1-f95008ad9971][SMS Communication]]
- periodic communication reports
